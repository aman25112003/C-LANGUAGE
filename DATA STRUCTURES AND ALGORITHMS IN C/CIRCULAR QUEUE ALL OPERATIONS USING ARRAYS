#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct queue
{
    int size;
    int f;//f->front
    int r;//r->rear
    int *arr;
};
//FUNCTION TO CHECK IF THE CIRCULAR QUEUE IS FULL
int isfull(struct queue *q)
{
    if((q->r+1)%q->size==q->f)
    {return 1;}
    else
    {
        return 0;
    }
}
//FUNCTION TO CHECK IF THE CIRCULAR QUEUE IS EMPTY
int isempty(struct queue *q)
{
    if(q->f==q->r)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
//FUNCTION FOR ENQUEUE IN A CIRCULAR QUEUE  OR  INSERTION IN A CIRCULAR QUEUE
void enQueue(struct queue *q,int data)
{
    if(isfull(q))
    {
        printf("QUEUE OVERFLOW:\n");
    }
    else
    {
        q->r=(q->r+1)%q->size;
        q->arr[q->r]=data;
    }
}
//FUNCTION FOR DEQUEUE IN A CIRCULAR QUEUE  OR  DELETION IN A CIRCULAR QUEUE
int deQueue(struct queue *q)
{
    int a=-1;
    if(isempty(q))
    {
        printf("QUEUE UNDERFLOW\n");
    }
    else
    {
        q->f=(q->f+1)%q->size;
        a=q->arr[q->f];
        return a;    
    }
}
//FUNCTION FOR PEEK OPERATION
int peek(struct queue *q)
{
    if(isempty(q))
    {
        printf("THE QUEUE IS EMPTY\n");
        return -1;
    }
    else
    {
       return q->arr[q->f];
    }
}
//FUNCTION FOR DISPLAYING ALL THE ELEMENTS IN THE QUEUE
void display(struct queue *q)
{
    for(int i=q->f+1;i<=q->r;i++)
    {
        printf("%d\n",q->arr[i]);    
    }
}
//MAIN FUNCTION
int main()
{
    struct queue q;
    q.size=18;
    q.f=0;
    q.r=0;
    q.arr=(int *)malloc(q.size*sizeof(int));
    printf("QUEUE HAS BEEN CREATED SUCCESSFULLY:\n");
    int choice,value,num;
    printf("PRESS 1.TO ENQUEUE:\n");
    printf("PRESS 2.TO DEQUEUE:\n");
    printf("PRESS 3.TO PEEK:\n");
    printf("PRESS 4.TO DISPLAY ALL THE ELEMENTS IN THE CIRCULAR QUEUE:\n");
    printf("PRESS 5.TO EXIT:\n");
    while(1)
    {
        printf("ENTER YOUR CHOICE:\n");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
            {
                printf("ENTER THE ELEMENT TO BE ENQUEUED:\n");
                scanf("%d",&num);
                enQueue(&q,num);
                printf("THE %d ELEMENT HAS BEEN ENQUEUED IN THE CIRCULAR QUEUE:\n",num);
                break;
            }
            case 2:
            {
                int x=deQueue(&q);
                if(x>0)
                {
                    printf("THE ELEMENT %d HAS BEEN DEQUEUED FROM THE CIRCULAR QUEUE:\n",x);
                }
                break;
            }
            case 3:
            {
                int y=peek(&q);
                if(y>0)
                {
                    printf("THE ELEMENT AT THE FRONT OF THE CIRCULAR QUEUE IS %d:\n",peek(&q));
                }
                break;
            }
            case 4:
            {
                if(q.f==q.r)
                {
                    printf("THE QUEUE IS EMPTY:\n");
                }
                else
                {
                    printf("THE ELEMENTS OF THE CIRCULAR QUEUE ARE:\n");
                    display(&q);
                    
                }
                break;
            }
            case 5:
            {
                exit(0);
                break;
            }
            default:
            {
                printf("INVALID DETAILS ENTERED\n");
            }
        }
    }
        return 0;
}
