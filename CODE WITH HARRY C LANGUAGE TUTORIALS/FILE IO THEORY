//FILES ARE USED TO STORE DATA AND INFORMATION
//FILES ARE USED TO READ AND ACCESS DATA ANYTIME FROM THE HARD DISK
//FILES MAKE IT EASY FOR A PROGRAMMER TO ACCESS AND STORE CONTENT WITHOUT LOSING IT ON PROGRAM TERMINATION
//WHEN A C PROGRAM IS TERMINATED ,THE DATA STORED IN RAM IS LOST
//STORING IN A FILE WILL PRESERVE OUR DATA EVEN AFTER THE PROGRAM TERMINATES
//RAM IS NOT ABLE TO HANDLE QUITE LARGE AMOUNT OF DATA DUE TO ITS SMALL SIZE RELATIVE TO THE HARD DISK
//IT IS EASY TO TRANSFER DATA AS FILES
//THERE ARE TWO TYPES OF FILES NAMELY TEXT FILES AND BINARY FILES
/*
    IN C WE CAN PERFORM THESE HIGH LEVEL OPERATIONS ON FILES:
    1. CREATING A NEW FILE
    2. OPENING A FILE
    3. CLOSING A FILE
    4. READING FROM AND WRITING TO A FILE
*/
/*
    OPENING A FILE:CREATING OR EDITING A FILE
    STDIO.H CONTAINS A FUNCTION CALLED FOPEN() FOR OPENING FILES IN C
    THE SYNTAX FOR OPENING A FILE IN STANDARD I/O IS:
    ptr=fopen("fileopen","mode")
    FOR EXAMPLE:
    fopen("E:\\CODE\\HARRY.TXT","W"),W MEANS WRITING MODE
    fopen("E:\\PROGRAMMING\\BHAI.BIN","rb"),RB MEANS READ BINARY MODE
*/
/*
    ANY FILE WHICH IS OPENED IN A C PROGRAM NEEDS TO BE CLOSED
    CLOSING A FILE IS ACCOMPLISHED BY THE LIBRARY FUNCTION FCLOSE()
    FCLOSE(PTR);//FPTR IS THE FILE POINTER ASSOCIATED WITH FILE TO BE CLOSED
*/
/*
    READING A FILE:
    IN ORDER TO READ A FILE,WE CAN USE FSCANF FUNCTION
    THIS FUNCTION IS FILE VERSION OF SCANF FUNCTION
    FSCANF EXPECTS A FILE POINTER IN ADDITION TO THE OTHER ARGUMENTS WHICH SCANF EXPRESS
    WE WILL HAVE TO OPEN THE FILE IN READ MODE IN ORDER TO USE THIS FUNCTION
    SYNTAX: FSCANF(PTR,"%S",STRING);
*/
/*
    WRITING TO A FILE:
    IN ORDER TO WRITE TO A FILE , WE CAN USE FPRINTF FUNCTION
    THIS FUNCTION IS THE FILE VERSION OF THE PRINTF FUNCTION
    FPRINTF EXPECTS A FILE POINTER IN ADDITION TO THE OTHER ARGUMENTS WHICH PRINTF EXPECTS
    WE WILL HAVE TO OPEN THE FILE IN WRITE MODE IN ORDER TO USE THIS FUNCTION
    SYNTAX: FPRINTF(PTR,"%S",STRING);
*/
